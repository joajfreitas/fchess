var searchIndex = JSON.parse('{\
"book":{"doc":"","t":"F","n":["main"],"q":[[0,"book"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"cli":{"doc":"","t":"DLLMLLLLLLLLLLFLLLLL","n":["Args","augment_args","augment_args_for_update","book","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"cli"]],"d":["fchess cli interface","","","path to polyglot openning book","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2],"f":[0,[1,1],[1,1],0,[[]],[[]],[[],1],[[],1],[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],[[]],[[],10],[[],7],[[],7],[[],11],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]]],"c":[],"p":[[3,"Command"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[6,"Result"],[3,"TypeId"]]},\
"fchess":{"doc":"This crate provides a library for chess board â€¦","t":"NDDDDDEDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Black","Board","Book","Move","MoveGenerator","MoveSet","Side","Solver","Square","White","apply","attack","best_move","bishop_attacks","bitand","bitor","bitxor","black_pawn_attacks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checkmate","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains","default","default","default","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_algebraic","from_algebraic","from_basic_board","from_fen","from_filename","from_full_algebraic","from_index","from_rank_file","from_san","generate_moves","generate_moves_for_piece","get_best_move","get_dst","get_enpassant","get_file","get_full_move_clock","get_half_move_clock","get_index","get_promotion","get_rank","get_src","get_target","get_turn","into","into","into","into","into","into","into","into","into_iter","into_iter","king_attacks","knight_attacks","mov","new","new","new","new","new","not","occupied","partial_cmp","partial_cmp","piece","piece_at","rook_attacks","scoped","set_castling_black_long","set_castling_black_short","set_castling_white_long","set_castling_white_short","set_enpassant","set_file","set_full_move_clock","set_half_move_clock","set_piece","set_promotion","set_rank","set_target","set_turn","shift","src","to_algebraic","to_algebraic","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","white_pawn_attacks","zobryst_hash"],"q":[[0,"fchess"]],"d":["","Bitboard representation of the chess board","Representation of a PolyGlot book","Chess move","","","Represents the board side.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[10,0,0,0,0,0,0,0,0,10,1,4,6,4,5,5,5,4,15,1,4,2,5,10,6,7,15,1,4,2,5,10,6,7,1,1,4,2,5,10,6,7,1,4,2,5,10,6,7,2,7,5,1,4,10,6,1,2,5,10,7,1,1,4,2,2,5,5,10,6,7,15,1,4,2,5,10,6,7,2,7,1,1,15,2,7,7,2,4,4,15,2,1,7,1,1,7,2,7,2,2,1,15,1,4,2,5,10,6,7,1,5,4,4,5,1,4,2,5,6,10,1,2,7,5,1,4,1,1,1,1,1,1,7,1,1,1,2,7,2,1,5,5,2,7,1,4,2,5,10,6,7,1,2,5,15,1,4,2,5,10,6,7,15,1,4,2,5,10,6,7,15,1,4,2,5,10,6,7,4,1],"f":[0,0,0,0,0,0,0,0,0,0,[[1,2],[[3,[1]]]],0,[[6,1],[[3,[2]]]],0,[[5,5]],[[5,5]],[[5,5]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,9],[1,1],[4,4],[2,2],[5,5],[10,10],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],11],[[7,7],11],[[5,2],9],[[],1],[[],4],[[],10],[[],6],[[1,1],9],[[2,2],9],[[5,5],9],[[10,10],9],[[7,7],9],[[1,12],13],[[1,12],13],[[4,12],13],[[2,12],13],[[2,12],13],[[5,12],13],[[5,12],13],[[10,12],13],[[6,12],13],[[7,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,[[3,[2]]]],[14,[[3,[7]]]],[[],1],[14,1],[14,15],[14,[[3,[2]]]],[16,7],[[16,16],7],[[14,1],[[3,[2]]]],[[4,1],[[17,[5]]]],[[4,1,7],[[3,[5]]]],[[15,1],[[3,[2]]]],[2,7],[1,[[3,[7]]]],[7,16],[1,16],[1,16],[7,16],[2,[[3,[0]]]],[7,16],[2,7],[2,[[3,[7]]]],[1,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[5],0,0,0,[[],1],[[],4],[[7,7],2],0,[[],6],[10],0,[[2,2],[[3,[11]]]],[[7,7],[[3,[11]]]],0,[[1,7],[[3,[0]]]],0,0,[[1,9]],[[1,9]],[[1,9]],[[1,9]],[[1,[3,[7]]]],[[7,16]],[[1,16]],[[1,16]],0,[[2,[3,[0]]]],[[7,16]],[[2,[3,[7]]]],[[1,10]],[[5,18],5],0,[2,19],[7,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,[[1,10],8]],"c":[],"p":[[3,"Board"],[3,"Move"],[4,"Option"],[3,"MoveGenerator"],[3,"MoveSet"],[3,"Solver"],[3,"Square"],[15,"u64"],[15,"bool"],[4,"Side"],[4,"Ordering"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Book"],[15,"u8"],[3,"Vec"],[15,"i8"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"fen_diagram":{"doc":"","t":"F","n":["main"],"q":[[0,"fen_diagram"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"test_apply_move":{"doc":"","t":"DDDLLLLLLLMLMMMLLLLMMLLLMMFMLLLMMMMLMMMMMLLLLLLLLL","n":["SuitResult","TestCase","TestResult","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","description","deserialize","expected_board","expected_fen","failed_tests","fmt","from","from","from","id","id","into","into","into","lan","lan","main","mov","new","new","push_test","result","result_board","san","san","serialize","start_fen","starting_board","successful_tests","tests","total_tests","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"test_apply_move"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,9,12,4,9,12,4,12,4,4,12,4,9,4,9,12,4,12,4,9,12,4,12,4,0,12,9,12,9,12,12,12,4,4,4,12,9,9,9,9,12,4,9,12,4,9,12,4],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],2],0,[3,[[5,[4]]]],0,0,0,[[4,6],7],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,[[],8],0,[[],9],[[10,1,1,1,10,10,11],12],[[9,12]],0,0,0,0,[[4,13],5],0,0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],14],[[],14],[[],14]],"c":[],"p":[[3,"Board"],[15,"bool"],[8,"Deserializer"],[3,"TestCase"],[4,"Result"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"SuitResult"],[15,"str"],[3,"Move"],[3,"TestResult"],[8,"Serializer"],[3,"TypeId"]]},\
"test_movegen":{"doc":"","t":"DDLLLLLLLLMLMLLLMLLFMLLMMLMAMLLLLLLLLLIDLLMLLLLLLLLKMMKMLLL","n":["MovegenTestResult","TestCase","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","description","deserialize","fen","fmt","from","from","id","into","into","main","moves","new","result","result","resulting_moves","serialize","square","test_common","testcase","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","TestResult","TestSuit","borrow","borrow_mut","failed_tests","finalize","from","get_failed_tests","get_successful_tests","get_total_tests","into","new","push_test","result","successfull_tests","tests","to_string","total_tests","try_from","try_into","type_id"],"q":[[0,"test_movegen"],[38,"test_movegen::test_common"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,1,1,1,1,2,1,1,2,0,1,2,2,2,2,1,1,0,2,1,2,2,1,2,1,2,1,2,0,0,14,14,14,14,14,14,14,14,14,14,14,13,14,14,13,14,14,14,14],"f":[0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,[3,[[4,[1]]]],0,[[1,5],6],[[]],[[]],0,[[]],[[]],[[]],0,[[1,[8,[7]],9],2],[2,9],0,0,[[1,10],4],0,0,0,[[]],[[]],[2,11],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],0,0,[[]],[[]],0,[[[14,[13]]]],[[]],[[[14,[13]]],15],[[[14,[13]]],15],[[[14,[13]]],15],[[]],[[],[[14,[13]]]],[[[14,[13]],13]],[[],9],0,0,[[],11],0,[[],4],[[],4],[[],12]],"c":[],"p":[[3,"TestCase"],[3,"MovegenTestResult"],[8,"Deserializer"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Move"],[3,"Vec"],[15,"bool"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[8,"TestResult"],[3,"TestSuit"],[15,"u32"]]},\
"uci":{"doc":"","t":"F","n":["main"],"q":[[0,"uci"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
