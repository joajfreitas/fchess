var searchIndex = JSON.parse('{\
"book":{"doc":"","t":[5],"n":["main"],"q":["book"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"cli":{"doc":"","t":[5],"n":["main"],"q":["cli"],"d":[""],"i":[0],"f":[[[],1]],"p":[[6,"Result"]]},\
"fchess":{"doc":"This crate provides a library for chess board â€¦","t":[13,3,3,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Black","Board","Book","Move","Side","Solver","White","apply","best_move","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checkmate","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_algebraic","from_basic_board","from_fen","from_filename","from_full_algebraic","from_san","get_best_move","get_dst","get_enpassant","get_full_move_clock","get_half_move_clock","get_promotion","get_src","get_target","get_turn","into","into","into","into","into","into_iter","new","new","new","not","occupied","piece_at","scoped","set_castling_black_long","set_castling_black_short","set_castling_white_long","set_castling_white_short","set_enpassant","set_full_move_clock","set_half_move_clock","set_piece","set_promotion","set_target","set_turn","to_algebraic","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","zobryst_hash"],"q":["fchess","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Represents the board side.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,0,0,0,0,0,6,1,4,10,1,2,6,4,10,1,2,6,4,1,1,2,6,4,1,2,6,4,1,6,4,1,2,6,1,2,6,1,1,2,2,6,4,10,1,2,6,4,2,1,1,10,2,2,10,2,1,1,1,2,2,2,1,10,1,2,6,4,1,1,2,4,6,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,2,6,4,1,2,10,1,2,6,4,10,1,2,6,4,10,1,2,6,4,10,1,2,6,4,1],"f":[0,0,0,0,0,0,0,[[1,2],[[3,[1]]]],[[4,1],[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,5],[1,1],[2,2],[6,6],[4,4],[[]],[[]],[[]],[[]],[[],1],[[],6],[[],4],[[1,1],5],[[2,2],5],[[6,6],5],[[],5],[[],5],[[],5],[[1,7],8],[[1,7],8],[[2,7],8],[[2,7],8],[[6,7],8],[[4,7],8],[[]],[[]],[[]],[[]],[[]],[9,[[3,[2]]]],[[],1],[9,1],[9,10],[9,[[3,[2]]]],[[9,1],[[3,[2]]]],[[10,1],[[3,[2]]]],0,[1,[[3,[0]]]],[1,11],[1,11],[2,[[3,[0]]]],0,[2,[[3,[0]]]],[1,6],[[]],[[]],[[]],[[]],[[]],[1],[[],1],0,[[],4],[6],0,0,0,[[1,5]],[[1,5]],[[1,5]],[[1,5]],[[1,[3,[0]]]],[[1,11]],[[1,11]],0,[[2,[3,[0]]]],[[2,[3,[0]]]],[[1,6]],[2,13],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[1,6],12]],"p":[[3,"Board"],[3,"Move"],[4,"Option"],[3,"Solver"],[15,"bool"],[4,"Side"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Book"],[15,"u8"],[15,"u64"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"fen_diagram":{"doc":"","t":[5],"n":["main"],"q":["fen_diagram"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"test_move_generation":{"doc":"","t":[3,3,3,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,12,12,11,11,11,12,12,5,12,11,11,11,12,12,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["SuitResult","TestCase","TestResult","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","description","deserialize","expected_board","expected_fen","failed_tests","fmt","from","from","from","id","id","into","into","into","lan","lan","main","mov","new","new","push_test","result","result_board","san","san","serialize","start_fen","starting_board","successful_tests","tests","total_tests","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["test_move_generation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,8,11,3,8,11,3,11,3,3,11,3,8,3,8,11,3,11,3,8,11,3,11,3,0,11,8,11,8,11,11,11,3,3,3,11,8,8,8,8,11,3,8,11,3,8,11,3,8,11,3],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],2],0,[[],[[4,[3]]]],0,0,0,[[3,5],6],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,[[],7],0,[[],8],[[9,1,1,1,9,9,10],11],[[8,11]],0,0,0,0,[3,4],0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[],12],[[]],[[]],[[]]],"p":[[3,"Board"],[15,"bool"],[3,"TestCase"],[4,"Result"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"SuitResult"],[15,"str"],[3,"Move"],[3,"TestResult"],[3,"TypeId"]]},\
"uci":{"doc":"","t":[5],"n":["main"],"q":["uci"],"d":[""],"i":[0],"f":[[[],1]],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
